class_label1 = "0",
class_label2 = "1",
quadrant_col2 = "#00BA38",
quadrant_col1 = "#F8766D",
custom_title = "Matriz Confusão sentimento Negativo",
text_col= "black")
confusionMatrix(dados_camilo$sentimento_negativo, dados_camilo_manual$`SENTIMENTO NEGATIVO`)
ConfusionTableR::binary_visualiseR(train_labels = dados_camilo$sentimento_positivo,
truth_labels= dados_camilo_manual$`SENTIMENTO POSITIVO`,
class_label1 = "0",
class_label2 = "1",
quadrant_col2 = "#00BA38",
quadrant_col1 = "#F8766D",
custom_title = "Matriz Confusão sentimento Positivo",
text_col= "black")
confusionMatrix(dados_camilo$sentimento_positivo, dados_camilo_manual$`SENTIMENTO POSITIVO`)
shiny::runApp('Desktop/news_homepage/homepage')
shiny::runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
shiny::runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
shiny::runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
ui <- fluidPage( tags$style('.container-fluid {
background-color: #FEFDFA;
}', 'body{overflow:hidden;}',
'.navbar-default:hover{
color: orange;
}'
),
fluidRow(
column(12,
navbarPage(tabPanel(title = "logo", imageOutput("logo_img")),
tabPanel("Home",
column(8,
tabPanel(title = "Home", imageOutput("home_img"), style="margin-bottom: -180px;")
),
column(4,
div(class="header", checked=NA,style= "background-color:#000019; margin-top: -20px; height: 460px",
h1(style="color: #DFAF64; padding: 20px", "New"),
p(style="color: #FEFFFE; padding-top: 5px; padding-left: 20px; padding-right: 20px; font-weight: bold", "Hydrogen VS Electric Cars"),
p(style="color: #9D9DAF; padding-top: 5px; padding-left: 20px; padding-right: 20px","Will hydrogen-fueled cars ever catch up to EVs?"),
hr(),
tags$style(HTML("hr {border-top: 1px solid 9D9DAF; margin: 15px}")),
p(style="color: #FEFFFE; padding-top: 5px; padding-left: 20px; padding-right: 20px; font-weight: bold","The Downsides of AI Artistry"),
p(style="color: #9D9DAF; padding-top: 5px; padding-left: 20px; padding-right: 20px","What are the possible adverse effects of on-demand AI image generation?"),
hr(),
tags$style(HTML("hr {border-top: 1px solid 9D9DAF}")),
p(style="color: #FEFFFE; padding-top: 5px; padding-left: 20px; padding-right: 20px; font-weight: bold","Is VC Funding Drying Up?"),
p(style="color: #9D9DAF; padding-top: 5px; padding-left: 20px; padding-right: 20px","Private funding by VC firms is down 50% YOY. We take a look at what that means.")
)),
fluidRow(
column(6,
h1(style="text-align: justify; font-size = 180px; margin-left:20px; margin-top:-100px; font-weight:bold",
"The Bright",
br(), "Future of",
br(), "Web 3.0?")),
column(6,
p(style="text-align: justify; font-size = 8px; color:#8E8C94; margin-left: -170px; margin-top: -100px;",
"We dive into the next evolution of the web that",
br(), "claims to put the power of the platforms back",
br(), "into the hands of the people. But is it really",
br(), "fulfilling its promise?")),
column(6, align = "left",
actionButton("button", "READ MORE"), tags$style(HTML('#button{background-color:#DC6557; color:white; font-weight:bold; margin-left: -170px; margin-top: 0px}'))
),
fluidRow(
column(6,
tabPanel(title = "retro", imageOutput("retro_img"), style="margin-bottom: -290px; margin-left:40px; margin-top: 30px;")
),
column(6,
h1(style="text-align: justify; font-size = 180px; margin-left:-290px; margin-top: 30px; font-weight:bold","01"),
p(style="text-align: justify; font-size = 180px; margin-left:-290px; margin-top: -5px; font-weight:bold","Reviving Retro PCs"),
p(style="text-align: justify; font-size = 8px; color:#8E8C94; margin-left:-290px; margin-top: -5px;",
"What happens when old PCs",
br(), "are given modern upgrades?"),
tabPanel(title = "note", imageOutput("note_img"), style="flex-direction:row; margin-left:0px; margin-top: -120px;"),
h1(style="text-align: justify; font-size = 180px; margin-left:180px; margin-top: -400px; font-weight:bold","02"),
p(style="text-align: justify; font-size = 180px; margin-left:180px; margin-top: 10px; font-weight:bold","Top 10 Laptops of 2022"),
p(style="text-align: justify; font-size = 8px; color:#8E8C94; margin-left: 180px; margin-top: 10px;",
"Our best picks for various",
br(), "needs and budgets."),
)),
),
),
tabPanel("Diamonds",
dados = diamonds,
titlePanel("Diamonds2"),
selectInput("style", "cut", c("All",
"Fair",
"Good",
"Very Good",
"Premium",
"Ideal")),
plotOutput(outputId = "lineplot", height = 500,width = 600)
)),
),
),
)
runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
library(datasets)
# Use a fluid Bootstrap layout
ui <-  fluidPage(
# Give the page a title
titlePanel("Telephones by region"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("region", "Region:",
choices=colnames(WorldPhones)),
hr(),
helpText("Data from AT&T (1961) The World's Telephones.")
),
# Create a spot for the barplot
mainPanel(
plotOutput("phonePlot")
)
)
)
server <- function(input, output) {
output$phonePlot <- renderPlot({
# Render a barplot
barplot(WorldPhones[,input$region]*1000,
main=input$region,
ylab="Number of Telephones",
xlab="Year")
})
}
shiny::runApp('Desktop/news_homepage/teste')
dados <- diamonds
library(ggplot2)
dados <- diamonds
View(dados)
runApp('Desktop/news_homepage/teste')
dados2 <- WorldPhones
library(datasets)
library(shiny)
library(ggplot2)
dados2 <- WorldPhones
View(dados2)
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
shinyintro::app("reactive_demo")
shinyintro::app("reactive_demo")
runApp('Desktop/news_homepage/teste')
dados2 <- iris
View(dados2)
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel(title=h4("Diamonds Test",align="center")),
sidebarLayout(
sidebarPanel(
selectInput("yil","1.Yıl Seçiniz",
choices = list("All"=1,"Fair"=2,"Good"=3,"Very Good"=4,"Premium"=5,"Ideal"=6))
),
mainPanel(
tabsetPanel(type="tab",
tabPanel("Grafik",plotOutput("bar"))
)
)
)
)
server <- function(input, output) {
output$bar <- renderPlot({
ggplot(data=carsales,aes(x = Brand, y = Quantity, group = Brand, color = Brand, fill=Brand)) +
geom_bar(stat = "identity")
})
}
shinyApp(ui = ui, server = server)
library(dplyr)
ui <- fluidPage(
titlePanel(title=h4("Diamonds Test",align="center")),
sidebarLayout(
sidebarPanel(
selectInput("yil","1.Yıl Seçiniz",
choices = list("All"=1,"Fair"=2,"Good"=3,"Very Good"=4,"Premium"=5,"Ideal"=6))
),
mainPanel(
tabsetPanel(type="tab",
tabPanel("Grafik",plotOutput("bar"))
)
)
)
)
server <- function(input, output) {
output$bar <- renderPlot({
ggplot(data=carsales,aes(x = Brand, y = Quantity, group = Brand, color = Brand, fill=Brand)) +
geom_bar(stat = "identity")
})
}
shinyApp(ui = ui, server = server)
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
shiny::runApp('Desktop/news_homepage/teste')
library(shiny)
library(ggplot2)
library(dplyr)
dados <- diamonds
View(dados)
ui <- fluidPage(
titlePanel(title=h4("Diamonds Test",align="center")),
sidebarLayout(
sidebarPanel(
selectInput("yil","1.Yıl Seçiniz",
choices =  diamonds$cut)
),
mainPanel(
tabsetPanel( plotOutput(outputId = "bar", height = 500,width = 600))
)
)
)
server <- function(input, output) {
carsales_subset <- reactive({
diamonds %>% filter(cut==input$yil)
})
output$bar <- renderPlot({
ggplot(data=carsales_subset(),aes(x = depth, y = table, group = depth, fill=depth)) +
geom_bar(stat = "identity")
})
}
dados <- diamonds
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
library(shiny)
library(ggplot2)
library(dplyr)
ui <- fluidPage(
titlePanel(title=h4("Diamonds Test",align="center")),
sidebarLayout(
sidebarPanel(
selectizeInput(
'yil', label = NULL, choices = diamonds$cut,
options = list(create = TRUE)
)
),
mainPanel(
tabsetPanel( plotOutput(outputId = "bar", height = 500,width = 600))
)
)
)
server <- function(input, output) {
carsales_subset <- reactive({
diamonds %>% filter(cut==input$yil)
})
updateSelectizeInput(session, 'yil', choices = diamonds, server = TRUE)
output$bar <- renderPlot({
ggplot(data=carsales_subset(),aes(x = depth, y = table, group = depth, fill=depth)) +
geom_bar(stat = "identity")
})
}
dados <- diamonds
shinyApp(ui = ui, server = server)
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
diamonds %>%
group_by(cut)
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
shiny::runApp('Desktop/news_homepage/teste')
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
dados <- diamonds
Categorical.Variables = c("cut", "color")
ui <- fluidPage(
titlePanel(title=h4("Diamonds Test",align="center")),
sidebarLayout(
sidebarPanel(
selectInput("categorical_variable", label = "Select Categorical Variable:",
choices = Categorical.Variables)
),
mainPanel(
tabsetPanel( plotOutput(outputId = "lineplot", height = 500,width = 600))
)
),
)
server <- function(input, output) {
output$lineplot <- renderPlot({
dados %>%
count(var = dados[[input$categorical_variable]], name = "count") %>%
plot_ly( x = ~var, y = ~ count, type = "bar", marker = list(color = '#008ae6',
line = list(color = '#008ae6', width = 2)), hoverinfo = "x+y") %>%
add_text(text = ~paste0( " (",   scales::percent(count/sum(count)),")"),
textposition = "bottom",
textfont = list(size = 12, color = "white"),
showlegend = FALSE) %>%
layout(xaxis = list(title = ""), yaxis = list(title = ""))
})
}
shinyApp(ui = ui, server = server)
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
dados <- diamonds
ui <- fluidPage(
titlePanel(title=h4("Diamonds Test",align="center")),
mainPanel(
tabsetPanel( plotOutput(outputId = "lineplot", height = 500,width = 600))
)
)
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
dados <- diamonds
ui <- fluidPage(
tabPanel("Diamonds",
titlePanel("Diamonds"),
plotOutput(outputId = "lineplot", height = 500,width = 600)
)
)
server <- function(input, output) {
output$lineplot <- renderPlot({
ggplot(dados, aes(x=as.factor(cut), fill=as.factor(cut)))  +
geom_bar() +
scale_y_continuous() +
geom_text(aes(y = (..count..),label =  scales::percent((..count..)/sum(..count..))),         stat="count",vjust=-1) +
geom_text(stat='count', aes(label=..count..), vjust=3) +
theme(legend.position="none") +
labs(title = "Distribuição de frequência do sentimento do Personagem 1",
x = 'Sentimento',
y = 'Frequência')
})
}
shinyApp(ui = ui, server = server)
dados <- diamonds
View(dados)
server <- function(input, output) {
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
library(shiny)
library(shiny)
library(shiny)
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
dados <- diamonds
ui <- fluidPage(
tabPanel("Diamonds",
titlePanel("Diamonds"),
plotOutput(outputId = "lineplot", height = 500,width = 600)
)
)
server <- function(input, output) {
output$lineplot <- renderPlot({
ggplot(dados, aes(x=as.factor(cut), fill=as.factor(cut)))  +
geom_bar() +
scale_y_continuous() +
geom_text(aes(y = after_stat(count),label =  scales::percent(after_stat(count)/sumafter_stat(count))),         stat="count",vjust=-1) +
geom_text(stat='count', aes(label=..count..), vjust=3) +
theme(legend.position="none") +
labs(title = "Distribuição de frequência do sentimento do Personagem 1",
x = 'Sentimento',
y = 'Frequência')
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
shiny::runApp('Desktop/news_homepage/teste')
library(shiny)
library(ggplot2)
dados <- diamonds
ui <- fluidPage(
Categorical.Variables = c("cut",'color', 'clarity'),
tabPanel("Diamonds dataset",
titlePanel("Diamonds dataset"),
p('A dataset containing the prices and other attributes of almost 54,000 diamonds. The variables are as follows:'),
selectInput("categorical_variable", label = "Select Categorical Variable:", choices = Categorical.Variables),
plotOutput(outputId = "lineplot", height = 500,width = 600)
)
)
Categorical.Variables = c("cut",'color','clarity')
ui <- fluidPage(
tabPanel("Diamonds dataset",
titlePanel("Diamonds dataset"),
p('A dataset containing the prices and other attributes of almost 54,000 diamonds. The variables are as follows:'),
selectInput("categorical_variable", label = "Select Categorical Variable:", choices = Categorical.Variables),
plotOutput(outputId = "lineplot", height = 500,width = 600)
)
)
server <- function(input, output) {
output$lineplot <- renderPlot({
ggplot(dados, aes(x=dados[[input$categorical_variable]], fill=as.factor(dados[[input$categorical_variable]])))  +
geom_bar() +
scale_y_continuous() +
geom_text(aes(y = (after_stat(count)),label =  scales::percent((after_stat(count))/sum(after_stat(count)))),         stat="count",vjust=-1) +
geom_text(stat='count', aes(label=after_stat(count)), vjust=3) +
theme(legend.position="none") +
labs(title = "Frequency of each category",
x = 'Categorical variable',
y = 'Frequency')
})
}
shinyApp(ui = ui, server = server)
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/teste')
runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
shiny::runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
shiny::runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
runApp('Desktop/news_homepage/homepage')
shiny::runApp('Desktop/news_homepage/homepage')
shiny::runApp('Desktop/shiny_homepage/homepage')
shiny::runApp('Desktop/shiny_homepage/homepage')
runApp('Desktop/shiny_homepage/homepage')
runApp('Desktop/shiny_homepage/homepage')
shiny::runApp('Desktop/shiny_homepage/homepage')
runApp('Desktop/shiny_homepage/homepage')
install.packages("prettydoc")
library(rmarkdown)
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(rmarkdown)
shiny::runApp('Desktop/shiny_homepage/plot_shiny')
Categorical.Variables
type(Categorical.Variables)
class(Categorical.Variables)
runApp('Desktop/shiny_homepage/plot_shiny')
runApp('Desktop/shiny_homepage/plot_shiny')
library(DBI)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql.sqlite")
knitr::opts_chunk$set(connection = "db")
shiny::runApp('Documents/shiny_homepage/barplot_shiny')
setwd("/Users/raquelrossi/Documents/GitHub/scripts-sql")
library(DBI)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql.sqlite")
knitr::opts_chunk$set(connection = "db")
library(DBI)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql.sqlite")
knitr::opts_chunk$set(connection = "db")
library(DBI)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql.sqlite")
knitr::opts_chunk$set(connection = "db")
library(DBI)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql.sqlite")
knitr::opts_chunk$set(connection = "db")
library(DBI)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql.sqlite")
knitr::opts_chunk$set(connection = "db")
library(DBI)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql.sqlite")
knitr::opts_chunk$set(connection = "db")
